// Generated by CoffeeScript 1.8.0
(function() {
  var DiectorySet, dirObjArr, dirWacher, fs, readFiles, setDirs, setFileWatch, setFileWatch1, type;

  fs = require('fs');

  DiectorySet = require('../dslib/directorySet.js');

  dirWacher = require('./dirWacher');

  dirObjArr = [];

  type = null;

  setDirs = function(_dirObjArr, _type) {
    dirObjArr = _dirObjArr;
    type = _type;
    return setFileWatch1();
  };

  setFileWatch1 = function() {
    var fileWatcher;
    fileWatcher = null;
    dirObjArr.forEach(function(_dirObj) {
      return fileWatcher = dirWacher.setFileWatch(_dirObj);
    });
    return fileWatcher.on('change', function(_mydirObj, _filename) {
      return dirObjArr.forEach(function(__dirObj) {
        if (_mydirObj.rootPath !== __dirObj.rootPath) {
          return fileWatcher.emit('writeTo', __dirObj, _mydirObj, _filename);
        }
      });
    });
  };

  readFiles = function() {
    var readAllFilesSync;
    readAllFilesSync = function(_rootPath, _dirObj, _tier) {
      var filenameArr;
      _tier++;
      filenameArr = fs.readdirSync(_rootPath + '\\' + _dirObj.dirPath);
      return filenameArr.forEach(function(_f) {
        var f, intactPath, stat;
        if (_dirObj.dirPath) {
          intactPath = _rootPath + '\\' + _dirObj.dirPath + '\\' + _f;
          f = _dirObj.dirPath + '\\' + _f;
        } else {
          intactPath = _rootPath + '\\' + _f;
          f = _f;
        }
        stat = fs.statSync(intactPath);
        if (stat.isDirectory()) {
          intactPath = new DirectorySet(_rootPath, f);
          _dirObj.append(intactPath);
          return readAllFilesSync(_rootPath, intactPath, _tier);
        } else {
          return _dirObj.push(_f);
        }
      });
    };
    dirObjArr.forEach(function(_dirObj) {
      return readAllFilesSync(_dirObj.rootPath, _dirObj, 0);
    });
    setFileWatch();
  };

  setFileWatch = function() {
    var fwMap;
    fwMap = {};
    dirObjArr.forEach(function(_dirObj) {
      var allDir, dir, _i, _len, _results;
      allDir = _dirObj.iterateObj(0);
      _results = [];
      for (_i = 0, _len = allDir.length; _i < _len; _i++) {
        dir = allDir[_i];
        _results.push((function() {
          var allFiles, baseDirPath, f, mydir, _j, _len1, _results1;
          mydir = dir.clone();
          baseDirPath = mydir.dirPath;
          allFiles = mydir.display(1);
          _results1 = [];
          for (_j = 0, _len1 = allFiles.length; _j < _len1; _j++) {
            f = allFiles[_j];
            _results1.push((function() {
              var fileChangeTrigger, fileWatcher, myfile;
              myfile = f;
              fileChangeTrigger = 1;
              fileWatcher = function(_evt, _filename) {
                if (_evt === 'change' && fileChangeTrigger++ % 2 === 0) {
                  return dirObjArr.forEach(function(__dirObj) {
                    var targetDir, targetPath;
                    targetDir = __dirObj.searchDirByPath(baseDirPath);
                    targetPath = targetDir.rootPath;
                    if (targetDir.dirPath) {
                      targetPath += '\\' + targetDir.dirPath + '\\' + _filename;
                    } else {
                      targetPath += '\\' + _filename;
                    }
                    if (targetPath !== myfile) {
                      fwMap[targetPath].close();
                      return fs.readFile(myfile, function(_err, _data) {
                        return fs.writeFile(targetPath, _data, function(_err) {
                          return fwMap[targetPath] = fs.watch(f, fileWatcher);
                        });
                      });
                    }
                  });
                }
              };
              return fwMap[myfile] = fs.watch(myfile, fileWatcher);
            })());
          }
          return _results1;
        })());
      }
      return _results;
    });
  };

  exports.setDirs = setDirs;

}).call(this);

//# sourceMappingURL=watchFile.js.map
