// Generated by CoffeeScript 1.8.0
(function() {
  var Dir, dirObjArr, fileWatch, filesArr, fs, readFiles, setDirs;

  fs = require('fs');

  Dir = require('../jslibs/fileTree.js');

  dirObjArr = [];

  filesArr = [];

  setDirs = function(_dirObjArr) {
    dirObjArr = _dirObjArr;
    return readFiles();
  };

  readFiles = function() {
    var readAllFiles, readAllFilesSync;
    readAllFilesSync = function(_dirObj) {
      var filenameArr;
      filenameArr = fs.readdirSync(_dirObj.path);
      return filenameArr.forEach(function(_f) {
        var stat;
        _f = _dirObj.path + '\\' + _f;
        stat = fs.statSync(_f);
        if (stat.isDirectory()) {
          _f = new Dir(_f);
          _dirObj.append(_f);
          return readAllFilesSync(_f);
        } else {
          return _dirObj.push(_f);
        }
      });
    };

    /*
    readAllFilesSync = (_path,_filesArr)->
      stat = fs.statSync _path
    
      if stat.isDirectory()
    
        filenameArr = fs.readdirSync _path
    
        _filesArr.push []
        _filesArr[_filesArr.length-1].push _path
    
        if _path.indexOf('/') isnt -1
          p = '/'
        else
          p = '\\'
    
        filenameArr.forEach (_f)->
          readAllFiles  "#{_path}#{p}#{_f}",_filesArr[_filesArr.length-1]
      else
        _filesArr.push _path
    
      return
     */
    readAllFiles = function(_path, _filesArr) {
      fs.stat(_path, function(_e, _stat) {
        if (_e) {
          throw _e;
        }
        if (_stat.isDirectory()) {
          return fs.readdir(_path, function(_e, _files) {
            var p;
            if (_e) {
              throw _e;
            }
            _filesArr.push([]);
            _filesArr[_filesArr.length - 1].push(_path);
            if (_path.indexOf('/') === -1) {
              p = '\\';
            } else {
              p = '/';
            }
            return _files.forEach(function(_f) {
              return readAllFiles("" + _path + p + _f, _filesArr[_filesArr.length - 1]);
            });
          });
        } else {
          return _filesArr.push(_path);
        }
      });
    };
    dirObjArr.forEach(function(_dirObj) {
      return readAllFilesSync(_dirObj);
    });
    dirObjArr.forEach(function(_dirObj) {
      return _dirObj.display();
    });
  };

  fileWatch = function(_evt, _baseDir, _filename) {
    if (_evt === 'change' && fileChangeTrigger++ % 2 === 0) {
      dirArr.forEach(function(_dir, _i) {
        var targetPath;
        if (dir !== _dir) {
          targetPath = _dir + '\\' + _filename;
          fwMap[targetPath].close();
          return fs.readFile(path, function(_err, _data) {
            if (_err) {
              throw _err;
            }
            return fs.writeFile(targetPath, _data, function(_err) {
              if (_err) {
                throw _err;
              }
              return fwMap[targetPath] = fs.watch(targetPath, fileWatch);
            });
          });
        }
      });
    }
  };


  /*
  fwMap = {}
  setWatch = ->
  
    filesArr.forEach (_files,_i)->
      _files.forEach (_file)->
        dir = dirArr[_i]
        path = dir + '\\'+_file
  
        fileChangeTrigger = 1
  
        fileWatch = (_evt,_filename)->
          if _evt is 'change' and fileChangeTrigger++%2 is 0
  
            dirArr.forEach (_dir,_i)->
              if dir isnt _dir
  
                targetPath = _dir + '\\' + _filename
                do fwMap[targetPath].close
  
                fs.readFile path,(_err,_data)->
                  if _err then throw _err
  
                  fs.writeFile targetPath,_data,(_err)->
                    if _err then throw _err
                    fwMap[targetPath] = fs.watch targetPath,fileWatch
          return
  
        fwMap[path] = fs.watch path,fileWatch
   */

  exports.setDirs = setDirs;

}).call(this);

//# sourceMappingURL=watchFile.js.map
